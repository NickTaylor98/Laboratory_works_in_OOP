<KOND_IZD>
<NAME> Red Storm </NAME>
<COST> 34 </COST>
<FACTORY> Roshen </FACTORY>
</KOND_IZD>
<KOND_IZD>
<NAME> goool </NAME>
<COST> 32 </COST>
<FACTORY> kommunarka </FACTORY>
</KOND_IZD>
<KOND_IZD>
<NAME> Eros </NAME>
<COST> 36 </COST>
<FACTORY> Spartak </FACTORY>
</KOND_IZD>
<KOND_IZD>
<COOKIE>
<NAME> Red Storm </NAME>
<COST> 34 </COST>
<FACTORY> Roshen </FACTORY>
<FORM> 3 </FORM>
<IZYUM> 1 </IZYUM>
<COOKIE>
</KOND_IZD>
void output_LT(Log::LOG log, LT::LexTable lextable)
	{
		(*log.stream) << "\n Таблица лексем : \n\n";
		for (int k = 0; k < lextable.size; k++)
		{
			if (lextable.table[k].sn != lextable.table[k - 1].sn)
			{
				*log.stream << std::endl;
				lextable.table[k].sn < 10 ? (*log.stream) << "0" << lextable.table[k].sn << ":" : (*log.stream) << lextable.table[k].sn << ":";
			}
			*log.stream << lextable.table[k].lexema;
			if (lextable.table[k].lexema == 'i')
				*log.stream << "[" << lextable.table[k].idxTI << "]";
		}
	}
	void output_IT(Log::LOG log, IT::IdTable idtable)
	{
		(*log.stream) << "\n\n Таблица идентификаторов : \n\n";
		for (int k = 0; k < idtable.size; k++)
		{
			switch (idtable.table[k].iddatatype)
			{
			case IT::STR:
				switch (idtable.table[k].idtype)
				{
				case IT::F: *log.stream << k << " : " << idtable.table[k].id << " str " << "F " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL;  break;
				case IT::V: *log.stream << k << " : " << idtable.table[k].id << " str " << "V " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL;  break;
				case IT::P: *log.stream << k << " : " << idtable.table[k].id << " str " << "P " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL; break;
				case IT::L: *log.stream << k << " : " << idtable.table[k].id << " str " << "L = <" << idtable.table[k].value.vstr.str << "> length = " << (int)idtable.table[k].value.vstr.len << IN_CODE_ENDL;  break;
				}
				break;

			case IT::INT:
				switch (idtable.table[k].idtype)
				{
				case IT::F: *log.stream << k << " : " << idtable.table[k].id << " int " << "F " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL;  break;
				case IT::V: *log.stream << k << " : " << idtable.table[k].id << " int " << "V " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL;  break;
				case IT::P: *log.stream << k << " : " << idtable.table[k].id << " int " << "P " << " [" << idtable.table[k].idxfirstLE << "]" << IN_CODE_ENDL; break;
				case IT::L: *log.stream << k << " : " << idtable.table[k].id << " int " << "L = " << idtable.table[k].value.vint << IN_CODE_ENDL;  break;
				}
				break;
			}	
		}
	}